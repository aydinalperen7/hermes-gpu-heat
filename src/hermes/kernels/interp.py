from numba import cuda@cuda.jitdef trilinear_interpolation(    x_new, y_new, z_new, # 1D coords for new grid    u_old,  # flattened old field (column major order)    nx_old, ny_old, nz_old,    dx, dy, dz,    xmin_old, ymin_old, zmin_old,    nx_new, ny_new, nz_new,    result,   # out: flattened new field    one):    """    Trilinear interpolation from (old) regular grid to (new) arbitrary coordinates.    Assumes regular spacing dx,dy,dz on old grid, and uses column major indexing.    """    ika = cuda.blockIdx.x * cuda.blockDim.x + cuda.threadIdx.x    if ika >= nx_new * ny_new * nz_new:        return    i_new = ika % nx_new    j_new = (ika // nx_new) % ny_new    k_new = ika // (nx_new * ny_new)    x = x_new[i_new]    y = y_new[j_new]    z = z_new[k_new]    i = int((x - xmin_old) / dx)    j = int((y - ymin_old) / dy)    k = int((z - zmin_old) / dz)    dx_frac = (x - (i * dx + xmin_old)) / dx    dy_frac = (y - (j * dy + ymin_old)) / dy    dz_frac = (z - (k * dz + zmin_old)) / dz    one_val = 1.0      if i == nx_old - 1:        i = nx_old - 2; dx_frac = one_val    if j == ny_old - 1:        j = ny_old - 2; dy_frac = one_val    if k == nz_old - 1:        k = nz_old - 2; dz_frac = one_val    base = i + j * nx_old + k * nx_old * ny_old    c000 = u_old[base] * (one_val - dx_frac) * (one_val - dy_frac) * (one_val - dz_frac)    c100 = u_old[base + 1] * dx_frac * (one_val - dy_frac) * (one_val - dz_frac)    c010 = u_old[base + nx_old] * (one_val - dx_frac) * dy_frac * (one_val - dz_frac)    c110 = u_old[base + nx_old + 1] * dx_frac * dy_frac * (one_val - dz_frac)    c001 = u_old[base + nx_old * ny_old] * (one_val - dx_frac) * (one_val - dy_frac) * dz_frac    c101 = u_old[base + nx_old * ny_old + 1] * dx_frac * (one_val - dy_frac) * dz_frac    c011 = u_old[base + nx_old * ny_old + nx_old] * (one_val - dx_frac) * dy_frac * dz_frac    c111 = u_old[base + nx_old * ny_old + nx_old + 1] * dx_frac * dy_frac * dz_frac    result[ika] = c000 + c001 + c010 + c011 + c100 + c101 + c110 + c111